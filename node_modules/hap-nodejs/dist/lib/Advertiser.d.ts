/// <reference types="node" />
import { MDNSServerOptions } from "@homebridge/ciao";
import { EventEmitter } from "events";
import { AccessoryInfo } from './model/AccessoryInfo';
/**
 * This enum lists all bitmasks for all known status flags.
 * When the bit for the given bitmask is set, it represents the state described by the name.
 */
export declare const enum StatusFlag {
    NOT_PAIRED = 1,
    NOT_JOINED_WIFI = 2,
    PROBLEM_DETECTED = 4
}
/**
 * This enum lists all bitmasks for all known pairing feature flags.
 * When the bit for the given bitmask is set, it represents the state described by the name.
 */
export declare const enum PairingFeatureFlag {
    SUPPORTS_HARDWARE_AUTHENTICATION = 1,
    SUPPORTS_SOFTWARE_AUTHENTICATION = 2
}
export declare const enum AdvertiserEvent {
    UPDATED_NAME = "updated-name"
}
export declare interface Advertiser {
    on(event: "updated-name", listener: (name: string) => void): this;
    emit(event: "updated-name", name: string): boolean;
}
/**
 * Advertiser uses mdns to broadcast the presence of an Accessory to the local network.
 *
 * Note that as of iOS 9, an accessory can only pair with a single client. Instead of pairing your
 * accessories with multiple iOS devices in your home, Apple intends for you to use Home Sharing.
 * To support this requirement, we provide the ability to be "discoverable" or not (via a "service flag" on the
 * mdns payload).
 */
export declare class Advertiser extends EventEmitter {
    static protocolVersion: string;
    static protocolVersionService: string;
    private readonly accessoryInfo;
    private readonly responder;
    private readonly setupHash;
    private advertisedService?;
    constructor(accessoryInfo: AccessoryInfo, options?: MDNSServerOptions);
    initAdvertiser(port: number): void;
    startAdvertising(): Promise<void>;
    isServiceCreated(): boolean;
    updateAdvertisement(): Promise<void>;
    stopAdvertising(): Promise<void>;
    shutdown(): Promise<void>;
    private createTxt;
    private computeSetupHash;
    static ff(...flags: PairingFeatureFlag[]): number;
    static sf(...flags: StatusFlag[]): number;
}
//# sourceMappingURL=Advertiser.d.ts.map