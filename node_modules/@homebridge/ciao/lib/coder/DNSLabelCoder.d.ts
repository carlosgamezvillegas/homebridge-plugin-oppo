/// <reference types="node" />
import { DecodedData } from "./DNSPacket";
export declare class DNSLabelCoder {
    private static readonly POINTER_MASK;
    private static readonly POINTER_MASK_ONE_BYTE;
    private static readonly NOT_POINTER_MASK;
    private buffer?;
    readonly legacyUnicastEncoding: boolean;
    private readonly trackedLengths;
    private readonly writtenNames;
    constructor(legacyUnicastEncoding?: boolean);
    initBuf(buffer?: Buffer): void;
    getUncompressedNameLength(name: string): number;
    getNameLength(name: string): number;
    encodeUncompressedName(name: string, offset: number): number;
    static encodeUncompressedName(name: string, buffer: Buffer, offset: number): number;
    encodeName(name: string, offset: number): number;
    decodeName(offset: number): DecodedData<string>;
    private static getLabelLength;
    private static writeLabel;
    private static computeLabelSuffixLength;
}
export declare class NonCompressionLabelCoder extends DNSLabelCoder {
    static readonly INSTANCE: NonCompressionLabelCoder;
    getNameLength(name: string): number;
    encodeName(name: string, offset: number): number;
}
//# sourceMappingURL=DNSLabelCoder.d.ts.map