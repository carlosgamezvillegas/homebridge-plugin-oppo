/// <reference types="node" />
import { DNSLabelCoder } from "./DNSLabelCoder";
import { DecodedData, DNSRecord, RClass, RType } from "./DNSPacket";
export interface RecordRepresentation {
    name: string;
    type: RType;
    class: RClass;
    ttl: number;
    flushFlag: boolean;
}
interface RecordHeaderData extends RecordRepresentation {
    rDataLength: number;
}
export declare type RRDecoder = (coder: DNSLabelCoder, header: RecordRepresentation, buffer: Buffer, offset: number) => DecodedData<ResourceRecord>;
export declare abstract class ResourceRecord implements DNSRecord {
    static readonly typeToRecordDecoder: Map<RType, RRDecoder>;
    static unsupportedRecordDecoder: RRDecoder;
    private static readonly FLUSH_MASK;
    private static readonly NOT_FLUSH_MASK;
    private static readonly DEFAULT_TTL;
    readonly name: string;
    readonly type: RType;
    readonly class: RClass;
    ttl: number;
    flushFlag: boolean;
    protected constructor(headerData: RecordRepresentation);
    protected constructor(name: string, type: RType, ttl?: number, flushFlag?: boolean, clazz?: RClass);
    getEncodingLength(coder: DNSLabelCoder): number;
    encode(coder: DNSLabelCoder, buffer: Buffer, offset: number): number;
    getRawData(): Buffer;
    protected abstract getRDataEncodingLength(coder: DNSLabelCoder): number;
    protected abstract encodeRData(coder: DNSLabelCoder, buffer: Buffer, offset: number): number;
    abstract dataAsString(): string;
    abstract clone(): ResourceRecord;
    /**
     * Evaluates if the data section of the record is equal to the supplied record
     * @param record
     */
    abstract dataEquals(record: ResourceRecord): boolean;
    static clone<T extends ResourceRecord>(records: T[]): T[];
    protected getRecordRepresentation(): RecordRepresentation;
    /**
     * Returns if the this and the supplied record are the same (ignoring ttl and flush flag)
     * @param record
     */
    aboutEqual(record: ResourceRecord): boolean;
    representsSameData(record: ResourceRecord): boolean;
    asString(): string;
    static decode(coder: DNSLabelCoder, buffer: Buffer, offset: number): DecodedData<ResourceRecord>;
    protected static decodeRecordHeader(coder: DNSLabelCoder, buffer: Buffer, offset: number): DecodedData<RecordHeaderData>;
}
export {};
//# sourceMappingURL=ResourceRecord.d.ts.map